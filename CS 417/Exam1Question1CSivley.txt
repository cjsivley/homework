// Codey Sivley
//
/* referenced:
* https://www.geeksforgeeks.org/vector-in-cpp-stl/
* https://stackoverflow.com/questions/571394/how-to-find-out-if-an-item-is-present-in-a-stdvector
* https://www.cplusplus.com/reference/algorithm/find/
*/

#include <iostream>
#include <vector>
#include <algorithm>

typedef int Node;

class AdjListClass {
private:
    std::vector<int> nodeVector; //list of vectors
    std::vector<std::vector<int>> edgeVector; //list of connecting points
public:
    AdjListClass() {
    }
    ~AdjListClass() {}

    //accessors
	
    //mutators
    void addEdge(int x, int y) {
        //if no matching edge found
        if (std::find(edgeVector.at(x).begin(), edgeVector.at(x).end(), y) != edgeVector.at(x).end()) {
            (edgeVector.at(x)).push_back(y); //add edge
        }
    }

    void deleteEdge(int x, int y) {
        std::remove(edgeVector.at(x).begin(), edgeVector.at(x).end(), y);
    }
    void addNode(Node x) {

        nodeVector.insert(nodeVector.end(), x);
        //resize edgeVector to match
        edgeVector.resize(nodeVector.size());
    }
    void deleteNode(Node x) {
        //delete all occurances of links to this node
        for (int i = 0; i < nodeVector.size(); i++) {
            std::remove(edgeVector.at(i).begin(), edgeVector.at(i).end(), x);
        }
        //then remove node
        std::remove(nodeVector.begin(), nodeVector.end(), x);
    }
};

int main()
{
    AdjListClass Graph;

    for (int i = 0; i < 5; i++) {
        Graph.addNode(i);
    }
    Graph.addEdge(0, 1);
    Graph.addEdge(1, 2);
    Graph.addEdge(2, 3);
    Graph.addEdge(0, 2);
    Graph.addEdge(0, 1);
    Graph.addEdge(2, 1);
    Graph.addEdge(4, 2);
    Graph.addEdge(3, 4);

    Graph.deleteEdge(0, 2);

    Graph.deleteNode(1);
}
